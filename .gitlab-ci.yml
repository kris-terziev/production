variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: "tcp://docker:2375"
    # shopware 6 variables
    MYSQL_ROOT_PASSWORD: root
    WEB_DOCUMENT_ROOT: '$CI_PROJECT_DIR/public'
    APP_URL: http://localhost:8000
    INSTANCE_ID: ""
    MAILER_URL: smtp://localhost:25?encryption=&auth_mode=
    SHOPWARE_CDN_STRATEGY_DEFAULT: id
    BLUE_GREEN_DEPLOYMENT: 1
    SHOPWARE_ES_ENABLED: 1
    SHOPWARE_ES_HOSTS: elasticsearch:9200
    SHOPWARE_ES_INDEXING_ENABLED: 1
    SHOPWARE_ES_INDEX_PREFIX: sw
    # The platform branch used to split the repos
    PLATFORM_BRANCH: "6.2"
    # minimum stability of the new version. current: v6.2.0-RC2 -> if rc: v6.2.0-RC3, if stable: v6.2.0
    MINIMUM_STABILITY: "stable"
    TEST_SUITES: "administration framework storefront checkout content system elasticsearch docs migration"
    SPLIT_REPOS: "Administration Storefront Core Elasticsearch Recovery"
    PACKAGE_BASE_URL: "https://releases.shopware.com/sw6/"

include:
    -   local: .gitlab-ci/release.yml

Test-Package:
    stage: build
    tags:
        - release
    only:
        refs:
            - schedules
    image: debian:buster-slim
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    variables:
        SPLITSH: /opt/splitsh-lite
    cache:
        key: "package_$PLATFORM_BRANCH"
        paths:
            - .platform
            - .composer
            - .apt
            - .npm
        policy: pull-push
    before_script:
        - apt-get update
        - DEB_PACKAGES="git jq composer php-dom php-tokenizer php-xmlwriter php-xml curl docker.io build-essential nodejs"
        # setup caching
        - rm /etc/apt/apt.conf.d/docker-clean
        - cp -a /var/cache/apt .apt
        - echo "Dir::Cache::Archives ${PWD}/.apt;" >> /etc/apt/apt.conf.d/cache.conf
        - apt-get install -y --download-only curl
        - apt-get install -y curl
        - curl -sL https://deb.nodesource.com/setup_12.x | bash -
        - apt-get install -y --download-only $DEB_PACKAGES
        - apt-get install -y $DEB_PACKAGES
        - npm config set cache $PWD/.npm
        - composer config --global  cache-dir $PWD/.composer
        # install helper tools
        - composer install --working-dir=.gitlab-ci/tools
        - '[[ -x $SPLITSH ]] || (curl -sL https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz | tar -xz ./splitsh-lite && mv splitsh-lite $SPLITSH)'
        - chmod +x $SPLITSH
        - HASH_CHECK_LINE="ec46c5a409422bf55b26f7de1faab67c2320362934947f984872b3aedc4a9d99  $SPLITSH"
        - echo $HASH_CHECK_LINE | sha256sum -c
        - git config --global user.email $GIT_EMAIL
        - git config --global user.name $GIT_USER
    script:
        # clone platform if it's not cached
        - '[[ -d .platform/ ]] || git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git -b ${PLATFORM_BRANCH} --bare .platform'
        - git -C .platform remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
        # fetch newest changes from $PLATFORM_BRANCH
        - git -C .platform fetch origin ${PLATFORM_BRANCH}
        # set HEAD to newest commit in $PLATFORM_BRANCH
        - git -C .platform reset --soft FETCH_HEAD
        # split platform into separate repos/packages
        - >
            for pkg in $SPLIT_REPOS ; do
              .gitlab-ci/split_repo.sh .platform src/${pkg}
              git -C .platform/ rev-parse HEAD > repos/${pkg,,}/PLATFORM_COMMIT_SHA
            done
        - export TAG=${TAG:-$(.gitlab-ci/tools/console show-next-tag --minimum-stability "$MINIMUM_STABILITY")}
        - export IMAGE_TAG=${TAG}-dev
        # build test package
        - .gitlab-ci/build-nightly.sh
        - docker build . -t "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
        # create package archive file
        - docker run -v $PWD/artifacts:/artifacts --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        - mv artifacts/install.tar.xz artifacts/install_${IMAGE_TAG}.tar.xz
    artifacts:
        expire_in: 1 week
        paths:
            - artifacts/
            - repos/

.test_base:
    image: shopware/development:latest
    stage: test
    only:
        refs:
            - schedules
    variables:
        GIT_STRATEGY: none
    services:
        -   name: mariadb:10.3
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

.e2e_base:
    extends: .test_base
    tags:
        - release
    cache:
        key: "e2e_$PLATFORM_BRANCH"
        paths:
            - .npm
            - .cypress
        policy: pull-push
    before_script:
        - export CYPRESS_CACHE_FOLDER="${PWD}/.cypress"
        - npm config set cache $PWD/.npm

.unit_base:
    extends: .test_base
    variables:
        GIT_STRATEGY: none
        DATABASE_URL: mysql://root:root@mysql:3306/sw6
    before_script:
        - cp artifacts/install*.tar.xz install.tar.xz
        - tar -xf install.tar.xz
        - rm install.tar.xz
        - /entrypoint supervisord > /dev/null 2>&1 &
    script:
        - bin/console system:install --drop-database --basic-setup --force
        - echo -e
            '<?xml version="1.0" encoding="UTF-8"?>
            <testsuites>
            ' > artifacts/phpunit.junit.xml
        - FAILED=0
        - >
            for TEST_SUITE in $TEST_SUITES; do
                log_unit_file=artifacts/$TEST_SUITE.junit.xml
                set -x
                php vendor/bin/phpunit --configuration phpunit.xml.dist --log-junit "$log_unit_file" --colors=never --testsuite "$TEST_SUITE" || FAILED=1
                set +x
                tail -n +3 "$log_unit_file" | head -n -1 >> artifacts/phpunit.junit.xml
            done
        - echo -e "</testsuites>" >> "artifacts/phpunit.junit.xml"
        - '[[ $FAILED -eq 0 ]]'
    artifacts:
        expire_in: 1 week
        paths:
            - artifacts/*.junit.xml
        reports:
            junit: artifacts/phpunit.junit.xml

Unit PHP 7.2:
    extends: .unit_base
    image: shopware/development:7.2

Unit PHP 7.3:
    extends: .unit_base
    image: shopware/development:7.3

Unit PHP 7.4:
    extends: .unit_base
    image: shopware/development:7.4

Unit MySQL 5.7:
    extends: .unit_base
    services:
        -   name: mysql:5.7
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MySQL 8.0:
    extends: .unit_base
    services:
        -   name: mysql:8.0.19
            alias: mysql
            command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password"]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MariaDB 10.4:
    extends: .unit_base
    services:
        -   name: mariadb:10.4
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

E2E Installer:
    extends: .e2e_base
    script:
        - cp artifacts/install*.tar.xz install.tar.xz
        - tar -xf install.tar.xz
        - rm install.tar.xz
        - /entrypoint supervisord > /dev/null 2>&1 &
        - apt-get update && apt-get install -y xvfb
        - cd vendor/shopware/recovery/Test/e2e
        - npm clean-install
        - $(npm bin)/cypress run --browser chrome --config baseUrl=http://localhost:8000 --config numTestsKeptInMemory=0
    artifacts:
        expire_in: 1 week
        paths:
            - vendor/shopware/recovery/Test/e2e/artifacts/
