variables:
    GIT_STRATEGY: clone
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: "tcp://docker:2375"
    # shopware 6
    WEB_DOCUMENT_ROOT: '$CI_PROJECT_DIR/public'
    MYSQL_ROOT_PASSWORD: root
    # The platform branch used to split the repos
    PLATFORM_BRANCH: "6.2"
    # minimum stability of the new version. Example: v6.2.0-RC2 -> if rc: v6.2.0-RC3, if stable: v6.2.0
    MINIMUM_STABILITY: "stable"

include:
    -   local: .gitlab-ci/release.yml

Build Test Package:
    stage: build
    tags:
        - release
    only:
        refs:
            - schedules
    image: debian:buster-slim
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    variables:
        GIT_STRATEGY: none
        SPLIT_REPOS: "Administration Storefront Core Elasticsearch Recovery"
        SPLITSH: /opt/splitsh-lite
    cache:
        key: "package_$PLATFORM_BRANCH"
        paths:
            - .platform
            - .composer
            - .apt
            - .npm
        policy: pull-push
    before_script:
        - apt-get update
        - DEB_PACKAGES="git jq composer php-dom php-tokenizer php-xmlwriter php-xml curl docker.io build-essential nodejs"
        # setup caching
        - rm /etc/apt/apt.conf.d/docker-clean
        - cp -a /var/cache/apt .apt
        - echo "Dir::Cache::Archives ${PWD}/.apt;" >> /etc/apt/apt.conf.d/cache.conf
        - apt-get install -y --download-only curl
        - apt-get install -y curl
        - curl -sL https://deb.nodesource.com/setup_12.x | bash -
        - apt-get install -y --download-only $DEB_PACKAGES
        - apt-get install -y $DEB_PACKAGES
        - npm config set cache $PWD/.npm
        # we need to do the checkout to have correct permissions. See: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1736
        - umask 0022
        - git init .
        - git remote add origin ${CI_REPOSITORY_URL}
        - git fetch
        - git checkout -f -q ${CI_COMMIT_SHA}
        - composer config --global  cache-dir $PWD/.composer
        # install helper tools
        - composer install --working-dir=.gitlab-ci/tools
        - '[[ -x $SPLITSH ]] || (curl -sL https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz | tar -xz ./splitsh-lite && mv splitsh-lite $SPLITSH)'
        - chmod +x $SPLITSH
        - HASH_CHECK_LINE="ec46c5a409422bf55b26f7de1faab67c2320362934947f984872b3aedc4a9d99  $SPLITSH"
        - echo $HASH_CHECK_LINE | sha256sum -c
        - git config --global user.email $GIT_EMAIL
        - git config --global user.name $GIT_USER
    script:
        # clone platform if it's not cached
        - '[[ -d .platform/ ]] || git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git -b ${PLATFORM_BRANCH} --bare .platform'
        - git -C .platform remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
        # fetch newest changes from $PLATFORM_BRANCH
        - git -C .platform fetch origin ${PLATFORM_BRANCH}
        # set HEAD to newest commit in $PLATFORM_BRANCH
        - git -C .platform reset --soft FETCH_HEAD
        # split platform into separate repos/packages
        - >
            for pkg in $SPLIT_REPOS ; do
              .gitlab-ci/split_repo.sh .platform src/${pkg}
              git -C .platform/ rev-parse HEAD > repos/${pkg,,}/PLATFORM_COMMIT_SHA
            done
        - export TAG=${TAG:-$(.gitlab-ci/tools/console show-next-tag --minimum-stability "$MINIMUM_STABILITY")}
        - export IMAGE_TAG=${TAG}-dev
        # build test package
        - .gitlab-ci/build-nightly.sh
        - docker build . -t "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
        - mkdir artifacts || true
        - chmod 777 artifacts || true
        # create package archive file
        - docker run -v $PWD/artifacts:/artifacts --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        - mv artifacts/install.tar.xz artifacts/install_${IMAGE_TAG}.tar.xz
        - echo ${TAG} > artifacts/TAG
    artifacts:
        expire_in: 1 week
        paths:
            - artifacts/
            - repos/

.test_base:
    image: shopware/development:latest
    stage: test
    only:
        refs:
            - schedules
    services:
        -   name: mariadb:10.3
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

.unit_base:
    extends: .test_base
    variables:
        TEST_SUITES: "administration framework storefront checkout content system elasticsearch docs migration"
        # shopware 6 env variables
        DATABASE_URL: mysql://root:root@mysql:3306/sw6
        APP_URL: http://localhost:8000
        INSTANCE_ID: ""
        MAILER_URL: smtp://localhost:25?encryption=&auth_mode=
        SHOPWARE_CDN_STRATEGY_DEFAULT: id
        BLUE_GREEN_DEPLOYMENT: 1
        SHOPWARE_ES_ENABLED: 1
        SHOPWARE_ES_HOSTS: elasticsearch:9200
        SHOPWARE_ES_INDEXING_ENABLED: 1
        SHOPWARE_ES_INDEX_PREFIX: sw
        GIT_STRATEGY: none
    before_script:
        - export TAG=$(cat artifacts/TAG)
        - cp artifacts/install*.tar.xz install.tar.xz
        - tar -xf install.tar.xz
        - rm install.tar.xz
        - /entrypoint supervisord > /dev/null 2>&1 &
    script:
        - bin/console system:install --drop-database --basic-setup --force
        - echo -e
            '<?xml version="1.0" encoding="UTF-8"?>
            <testsuites>
            ' > artifacts/phpunit.junit.xml
        - FAILED=0
        - >
            for TEST_SUITE in $TEST_SUITES; do
                log_unit_file=artifacts/$TEST_SUITE.junit.xml
                set -x
                php vendor/bin/phpunit --configuration phpunit.xml.dist --log-junit "$log_unit_file" --colors=never --testsuite "$TEST_SUITE" || FAILED=1
                set +x
                tail -n +3 "$log_unit_file" | head -n -1 >> artifacts/phpunit.junit.xml
            done
        - echo -e "</testsuites>" >> "artifacts/phpunit.junit.xml"
        - '[[ $FAILED -eq 0 ]]'
    artifacts:
        when: always
        expire_in: 1 week
        paths:
            - artifacts/*.junit.xml
        reports:
            junit: artifacts/phpunit.junit.xml

Unit PHP 7.2:
    extends: .unit_base
    image: shopware/development:7.2

Unit PHP 7.3:
    extends: .unit_base
    image: shopware/development:7.3

Unit PHP 7.4:
    extends: .unit_base
    image: shopware/development:7.4

Unit MySQL 5.7:
    extends: .unit_base
    services:
        -   name: mysql:5.7
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MySQL 8.0:
    extends: .unit_base
    services:
        -   name: mysql:8.0.19
            alias: mysql
            command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password"]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MariaDB 10.4:
    extends: .unit_base
    services:
        -   name: mariadb:10.4
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

.e2e_base:
    extends: .test_base
    services:
        -   name: mysql:5.7
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    tags:
        - release
    cache:
        key: "e2e_$PLATFORM_BRANCH"
        paths:
            - .npm
            - .cypress
        policy: pull-push
    artifacts:
        expire_in: 1 week
        paths:
            - vendor/shopware/recovery/Test/e2e/artifacts/

Install:
    extends: .e2e_base
    variables:
        GIT_STRATEGY: none
    before_script:
        - export TAG=$(cat artifacts/TAG)
        - export CYPRESS_CACHE_FOLDER="${PWD}/.cypress"
        - npm config set cache $PWD/.npm
    script:
        - cp artifacts/install*.tar.xz install.tar.xz
        - tar -xf install.tar.xz
        - rm install.tar.xz
        - /entrypoint supervisord > /dev/null 2>&1 &
        - apt-get update && apt-get install -y xvfb
        - cd vendor/shopware/recovery/Test/e2e
        - npm clean-install
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/installer/basic.spec.js

.e2e_update_base:
    extends: .e2e_base
    before_script:
        # delete everything but the caches and the .gitlab-ci dir
        - rm -Rf $(ls -a | grep -vE '^(\.gitlab-ci|\.cypress|\.npm|artifacts|\.\.?)$') || true
        - npm config set cache $PWD/.npm
        - export CYPRESS_CACHE_FOLDER="${PWD}/.cypress"
        - export TAG=$(cat artifacts/TAG)
        - '[[ -n $E2E_INSTALL_PACKAGE_URL && -n $E2E_TEST_DATA_FILE ]]'
        - curl ${E2E_INSTALL_PACKAGE_URL} --silent -o install
        - 'if [ ${E2E_INSTALL_PACKAGE_URL: -4} == ".zip" ]; then unzip -qqo install; else tar -xf install; fi'
        - rm install
        - export E2E_TEST_DATA_URL="${E2E_TEST_DATA_BASE_URL}/${E2E_TEST_DATA_FILE}"
        - curl ${E2E_TEST_DATA_URL} --silent -o test_data
        - 'if [ ${E2E_TEST_DATA_URL: -4} == ".zip" ]; then unzip -qqo test_data; else tar -xf test_data; fi'
        - rm test_data
        # import test data dump
        - mysql -h mysql -u root -proot -e 'DROP DATABASE IF EXISTS `sw6_e2e_test`; CREATE DATABASE `sw6_e2e_test`; use `sw6_e2e_test`; source database.sql;'
        # set update api base url to mock
        - >
            mysql -h mysql -u root -proot sw6_e2e_test -e 'UPDATE system_config SET configuration_value = "{\"_value\": \"http://localhost:3000\"}" WHERE configuration_key IN("core.store.apiUri", "core.update.apiUri")'
        - bin/console system:generate-jwt-secret
        - bin/console assets:install
        - npm --prefix .gitlab-ci/e2e/ ci
        # start update api mock
        - DEBUG=* UPDATE_FILE_PATH=$CI_PROJECT_DIR/artifacts/update.zip FAKE_VERSION=$TAG node .gitlab-ci/e2e/update-api-mock.js &
        # start webserver
        - /entrypoint supervisord > /dev/null 2>&1 &
        - apt-get update && apt-get install -y xvfb
        # get e2e from install archive
        - mkdir .gitlab-ci/e2e/test
        - cp artifacts/install*.tar.xz .gitlab-ci/e2e/test/install.tar.xz
        - cd .gitlab-ci/e2e/test
        - tar -xvf install.tar.xz ./vendor/shopware/recovery/Test/e2e/
        - mv ./vendor/shopware/recovery/Test/e2e/* .
        - npm clean-install
        - cd $CI_PROJECT_DIR
        - chown -R application:application $CI_PROJECT_DIR


.E2E Update:
    extends: .e2e_update_base
    script:
        - cd .gitlab-ci/e2e/test/
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/auto-update.spec.js
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/storefront.spec.js
    artifacts:
        when: always
        expire_in: 1 week
        paths:
            - .gitlab-ci/e2e/test/artifacts/*
            - var/log/*

Manual Update 6.1.6:
    extends: .e2e_update_base
    variables:
        E2E_INSTALL_PACKAGE_URL: https://releases.shopware.com/sw6/install_6.1.6_1589441426.zip
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
    script:
        - unzip -qqo artifacts/update.zip
        - chown -R application:application $CI_PROJECT_DIR
        - cd vendor/shopware/recovery/Test/e2e/
        - npm ci
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/manual-update.spec.js
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/storefront.spec.js
    artifacts:
        when: always
        expire_in: 1 week
        paths:
            - vendor/shopware/recovery/Test/e2e/artifacts/*
            - var/log/*

Update 6.1.6:
    extends: .E2E Update
    variables:
        E2E_INSTALL_PACKAGE_URL: https://releases.shopware.com/sw6/install_6.1.6_1589441426.zip
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"

Update 6.1.6 (Mysql 8.0):
    extends: .E2E Update
    services:
        -   name: mysql:8.0.19
            alias: mysql
            command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password"]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    variables:
        E2E_INSTALL_PACKAGE_URL: https://releases.shopware.com/sw6/install_6.1.6_1589441426.zip
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"

Update 6.2.0:
    extends: .E2E Update
    variables:
        E2E_INSTALL_PACKAGE_URL: https://releases.shopware.com/sw6/install_6.2.0_1589874223.zip
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
